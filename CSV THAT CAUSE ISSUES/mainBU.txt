int main(){
    srand (time(NULL));
//    float a1=1+rand()%10, b1=-50+rand()%100;
//    float a2=1+rand()%20 , b2=-50+rand()%100;

    float a1=5, b1=18;
    float a2=1 , b2=-16;


    // test the learned model: (40 points)
    // expected correlations:
    //	A-C: y=a1*x+b1
    //	B-D: y=a2*x+b2

//    generateTrainCSV(a1,b1,a2,b2);
    TimeSeries ts("trainFile1.csv");
    SimpleAnomalyDetector ad;
    ad.learnNormal(ts);
    vector<correlatedFeatures> cf=ad.getNormalModel();

    if(cf.size()!=2)
        cout<<"wrong size of correlated features (-40)"<<endl;
    else
        for_each(cf.begin(),cf.end(),[&a1,&b1,&a2,&b2](correlatedFeatures c){
            checkCorrelationTrain(c,"A","C",a1,b1); // 20 points
            checkCorrelationTrain(c,"B","D",a2,b2); // 20 points
        });

    // test the anomaly detector: (60 points)
    // one simply anomaly is injected to the data
//    int anomaly=5+rand()%90; // one anomaly injected in a random time step
    int anomaly=71; // one anomaly injected in a random time step

//    generateTestCSV(a1,b1,a2,b2,anomaly);
    TimeSeries ts2("testFile1.csv");
    vector<AnomalyReport> r = ad.detect(ts2);

    bool anomlyDetected=false;
    int falseAlarms=0;
    for_each(r.begin(),r.end(),[&anomaly,&anomlyDetected,&falseAlarms](AnomalyReport ar){
        if(ar.description=="A-C" && ar.timeStep == anomaly)
            anomlyDetected=true;
        else
            falseAlarms++;
    });

    if(!anomlyDetected)
        cout<<"the anomaly was not detected (-30)"<<endl;

    if(falseAlarms>0)
        cout<<"you have "<<falseAlarms<<" false alarms (-"<<min(30,falseAlarms*3)<<")"<<endl;

    cout<<"done"<<endl;
    return 0;
}
